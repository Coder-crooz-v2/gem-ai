import React, { useEffect, useState } from 'react'
import { Card, FormField, Loader } from '../components'

const Home = () => {

  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState('');
  const [allPosts, setAllPosts] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      await fetch('https://gem-ai.onrender.com/api/v1/posts', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(async res => await res.json())
        .then(data => {
          setAllPosts(data.data.reverse());
          setLoading(false);
        })
        .catch(err => {
          alert(err);
        }).finally(() => setLoading(false));
    }
    fetchPosts();
  }, [])

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  const RenderCards = (data, title) => {
    if (data?.length > 0) {
      return (
        data.map((post) => <Card key={post._id} {...post} />)
      )
    }
    return (
      <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
  }

  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>
          The community showcase
        </h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>
          Browse through a collection of imaginative and visually stunning images generated by Stability diffusion AI
        </p>
      </div>

      <div className='mt-16'>
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-[#6469ff]"></div>
          </div>
        ) : (
          <>
            {searchText && (
              <div className="mt-8">
                <h2 className="font-bold text-[#222328] text-[28px]">
                  Search results for <span
                    className='text-blue-400'>{searchText}</span>
                </h2>
              </div>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                RenderCards(searchedResults, "No results found")
              ) : (
                RenderCards(allPosts, "No search text")
              )}
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home
